syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    };
  };
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


message BlockStorage {
  // Name is a unique field.
  string name = 1;
  // string namespace = 2;

  // Annotations can store metadata used by the system for control.
  // In particular, implementation-dependent fields that can not be set as protobuf fields are targeted.
  // The control specified by n0stack may delete metadata specified by the user.
  map<string, string> annotations = 3;

  // Labels stores user-defined metadata.
  // The n0stack system must not rewrite this value.
  map<string, string> labels = 4;

  uint64 request_bytes = 10;
  uint64 limit_bytes = 11;

  // ISOか見極めたい気持ちがある
  // bool cd = 4;

  enum BlockStorageState {
    BLOCK_STORAGE_UNSPECIFIED = 0;
  
    // working API
    PENDING = 1;

    AVAILABLE = 2;
    IN_USE = 3;
    PROTECTED = 4;

    DELETED = 5;
  }
  BlockStorageState state = 50;
  // string state_reason = 51;

  string node_name = 52;
  string storage_name = 53;
}


service BlockStorageService {
  rpc CreateBlockStorage(CreateBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      post: "/api/v0/block_storage"
      body: "*"
    };
  }
  rpc FetchBlockStorage(FetchBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      post: "/api/v0/block_storage:fetch"
      body: "*"
    };
  }
  rpc CopyBlockStorage(CopyBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      post: "/api/v0/block_storage:copy"
      body: "*"
    };
  }

  rpc ListBlockStorages(ListBlockStoragesRequest) returns (ListBlockStoragesResponse) {
    option (google.api.http) = {
      get: "/api/v0/block_storage"
    };
  }

  rpc GetBlockStorage(GetBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      get: "/api/v0/block_storage/{name}"
    };
  }

  rpc UpdateBlockStorage(UpdateBlockStorageRequest) returns (BlockStorage) {}

  rpc DeleteBlockStorage(DeleteBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      delete: "/api/v0/block_storage/{name}"
    };
  }
  rpc UndeleteBlockStorage(UndeleteBlockStorageRequest) returns (BlockStorage) {
    option (google.api.http) = {
      post: "/api/v0/block_storage/{name}:undelete"
    };
  }
  rpc PurgeBlockStorage(PurgeBlockStorageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/v0/block_storage/{name}:purge"
    };
  }

  rpc DownloadBlockStorage(DownloadBlockStorageRequest) returns (DownloadBlockStorageResponse) {
    option (google.api.http) = {
      get: "/api/v0/block_storage/{name}:download"
    };
  }


  // AVAILABLE -> IN_USE
  rpc SetInuseBlockStorage(SetInuseBlockStorageRequest) returns (BlockStorage) {}
  // -> AVAILABLE
  rpc SetAvailableBlockStorage(SetAvailableBlockStorageRequest) returns (BlockStorage) {}
  // AVAILABLE -> PROTECTED
  rpc SetProtectedBlockStorage(SetProtectedBlockStorageRequest) returns (BlockStorage) {}


  // // when AVAILABLE, not IN_USE
  // rpc MigrateBlockStorage(MigrateBlockStorageRequest) returns (BlockStorage) {}
}

message BlockStorageChunk {
  bytes data = 1;
}

message CreateBlockStorageRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint64 request_bytes = 10;
  uint64 limit_bytes = 11;
}
message FetchBlockStorageRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint64 request_bytes = 10;
  uint64 limit_bytes = 11;

  string source_url = 100;
}
message CopyBlockStorageRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint64 request_bytes = 10;
  uint64 limit_bytes = 11;

  string source_block_storage = 100;
}

message ListBlockStoragesRequest {}
message ListBlockStoragesResponse {
  repeated BlockStorage block_storages = 1;
}

message GetBlockStorageRequest {
  string name = 1;
}

message UpdateBlockStorageRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint64 request_bytes = 10;
  uint64 limit_bytes = 11;
}

message DeleteBlockStorageRequest {
  string name = 1;
}
message UndeleteBlockStorageRequest {
  string name = 1;
}
message PurgeBlockStorageRequest {
  string name = 1;
}

message SetInuseBlockStorageRequest {
  string name = 1;
}
message SetAvailableBlockStorageRequest {
  string name = 1;
}
message SetProtectedBlockStorageRequest {
  string name = 1;
}

message DownloadBlockStorageRequest {
  string name = 1;
}
message DownloadBlockStorageResponse {
  string download_url = 1;
}

// message MigrateBlockStorageRequest {
//   string name = 1;
//   string node_name = 2;
// }
