syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    };
  };
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


message VirtualMachineNIC {
  string network_name = 1;
  map<string, string> annotations = 5;

  string hardware_address = 2;

  string ipv4_address = 3;
  string ipv6_address = 4;
}
message VirtualMachine {
  // Name is a unique field.
  string name = 1;
  // string namespace = 2;

  // Annotations can store metadata used by the system for control.
  // In particular, implementation-dependent fields that can not be set as protobuf fields are targeted.
  // The control specified by n0stack may delete metadata specified by the user.
  map<string, string> annotations = 3;

  // Labels stores user-defined metadata.
  // The n0stack system must not rewrite this value.
  map<string, string> labels = 4;

  uint32 request_cpu_milli_core = 10;
  uint32 limit_cpu_milli_core = 11;
  
  uint64 request_memory_bytes = 12;
  uint64 limit_memory_bytes = 13;
  
  repeated string block_storage_names = 14;
  repeated VirtualMachineNIC nics = 15;

  string uuid = 16;

  string login_username = 17;
  repeated string ssh_authorized_keys = 18;

  enum VirtualMachineState {
    VIRTUAL_MACHINE_UNSPECIFIED = 0;

    // working API
    PENDING = 1;

    // running vm
    RUNNING = 2;
    SHUTDOWN = 3;
    PAUSED = 4;
  }
  VirtualMachineState state = 50;

  string compute_node_name = 52;
  string compute_name = 53;

  repeated string network_interface_names = 54;
}


service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      post: "/api/v0/virtual_router"
      body: "*"
    };
  }
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {
    option (google.api.http) = {
      get: "/api/v0/virtual_machine"
    };
  }
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      get: "/api/v0/virtual_machine/{name}"
    };
  }
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (VirtualMachine) {}
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v0/virtual_machine/{name}"
    };
  }

  // VM actions
  // -> RUNNING
  rpc BootVirtualMachine(BootVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      post: "/api/v0/virtual_machine/{name}:boot"
    };
  }
  // RUNNING -> RUNNING
  rpc RebootVirtualMachine(RebootVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      post: "/api/v0/virtual_machine/{name}:reboot"
    };
  }
  // RUNNING -> SHUTDOWN
  rpc ShutdownVirtualMachine(ShutdownVirtualMachineRequest) returns (VirtualMachine) {
    option (google.api.http) = {
      post: "/api/v0/virtual_machine/{name}:shutdown"
    };
  }

  // RUNNING -> PAUSED
  // TODO: I doubt the necessity of this end point
  rpc SaveVirtualMachine(SaveVirtualMachineRequest) returns (VirtualMachine) {}
  
  rpc OpenConsole(OpenConsoleRequest) returns (OpenConsoleResponse) {
    option (google.api.http) = {
      get: "/api/v0/virtual_machine/{name}:open_console"
    };
  }

  // rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (VirtualMachine) {}
}

message CreateVirtualMachineRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint32 request_cpu_milli_core = 10;
  uint32 limit_cpu_milli_core = 11;

  uint64 request_memory_bytes = 12;
  uint64 limit_memory_bytes = 13;

  repeated string block_storage_names = 14;
  repeated VirtualMachineNIC nics = 15;

  string uuid = 16;

  string login_username = 17;
  repeated string ssh_authorized_keys = 18;
}

message ListVirtualMachinesRequest {}
message ListVirtualMachinesResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message GetVirtualMachineRequest {
  string name = 1;
}

message UpdateVirtualMachineRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  uint32 request_cpu_milli_core = 10;
  // uint32 limit_cpu_milli_core = 11;

  uint64 request_memory_bytes = 12;
  // uint64 limit_memory_bytes = 13;

  repeated string block_storage_names = 14;
  // repeated VirtualMachineNIC nics = 15;
}

message DeleteVirtualMachineRequest {
  string name = 1;
}

message BootVirtualMachineRequest {
  string name = 1;
}
message RebootVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}
message ShutdownVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}
message SaveVirtualMachineRequest {
  string name = 1;
}

message OpenConsoleRequest {
  string name = 1;
}
message OpenConsoleResponse{
  string console_url = 1;
}
