syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    };
  };
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


message VirtualIPTarget {
// target must be selected by connected network
  string network_name = 1;
  string network_interface_name = 2;
}
message VirtualRouter {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
  
  enum VirtualRouterState {
    VIRTUAL_ROUTER_UNSPECIFIED = 0;

    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 1;
  
    // working API
    PENDING = 2;
    
    AVAILABLE= 3;
  }
  VirtualRouterState state = 50;
  
  message VirtualRouterConnectedNetwork {
    string network_name = 1;
    string network_interface_name = 2;
  }
  repeated VirtualRouterConnectedNetwork connected_network = 51;

  message VirtualIP {
    string network_name = 1;
    string network_interface_name = 2;

    repeated VirtualIPTarget targets = 3;
  }
  map<string, VirtualIP> virtual_ip = 52;
}

service VirtualRouterService {
  rpc CreateVirtualRouter(CreateVirtualRouterRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      post: "/api/v0/virtual_router"
      body: "*"
    };
  }
  rpc ListVirtualRouters(ListVirtualRoutersRequest) returns (ListVirtualRoutersResponse) {
    option (google.api.http) = {
      get: "/api/v0/virtual_router"
    };
  }
  rpc GetVirtualRouter(GetVirtualRouterRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      get: "/api/v0/virtual_router/{name}"
    };
  }
  // rpc UpdateVirtualRouter(UpdateVirtualRouterRequest) returns (VirtualRouter) {}
  rpc DeleteVirtualRouter(DeleteVirtualRouterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v0/virtual_router/{name}"
    };
  }

  rpc ConnectNetwork(ConnectNetworkRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      post: "/api/v0/virtual_router/{virtual_router_name}/connected_network"
      body: "*"
    };
  }
  rpc DisconnectNetwork(DisconnectNetworkRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      delete: "/api/v0/virtual_router/{virtual_router_name}/connected_network/{network_name}"
    };
  }

  rpc ApplyVirtualIP(ApplyVirtualIPRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      put: "/api/v0/virtual_router/{virtual_router_name}/virtual_ip"
      body: "*"
    };
  }
  rpc DeleteVirtualIP(DeleteVirtualIPRequest) returns (VirtualRouter) {
    option (google.api.http) = {
      delete: "/api/v0/virtual_router/{virtual_router_name}/virtual_ip/{virtual_ip_name}"
    };
  }
}

message CreateVirtualRouterRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
}

message ListVirtualRoutersRequest {}
message ListVirtualRoutersResponse {
  repeated VirtualRouter virtual_routers = 1;
}

message GetVirtualRouterRequest {
  string name = 1;
}

// message UpdateVirtualRouterRequest {}

message DeleteVirtualRouterRequest {
  string name = 1;
}

message ConnectNetworkRequest {
  string virtual_router_name = 1;

  string network_name = 2;
  map<string, string> annotations = 3;
  string ipv4_address = 4;
  string ipv6_address = 5;
}
message DisconnectNetworkRequest {
  string virtual_router_name = 1;
  string network_name = 2;
}

message ApplyVirtualIPRequest {
  string virtual_router_name = 1;
  
  string virtual_ip_name = 2;
  string network_name = 3;
  map<string, string> annotations = 4;
  string ipv4_address = 5;
  string ipv6_address = 6;
  repeated VirtualIPTarget targets = 7;
}

message DeleteVirtualIPRequest {
  string virtual_router_name = 1;
  string virtual_ip_name = 2;
}
