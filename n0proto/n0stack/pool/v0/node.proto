syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/pool/v0;ppool";

package n0stack.pool.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "n0stack/budget/v0/compute.proto";
import "n0stack/budget/v0/storage.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    };
  };
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


message Node {
  // Name is a unique field.
  string name = 1;
  // string namespace = 2;

  // Annotations can store metadata used by the system for control.
  // In particular, implementation-dependent fields that can not be set as protobuf fields are targeted.
  // The control specified by n0stack may delete metadata specified by the user.
  map<string, string> annotations = 3;

  // Labels stores user-defined metadata.
  // The n0stack system must not rewrite this value.
  map<string, string> labels = 4;

  string address = 10;
  string ipmi_address = 11;

  string serial = 12;

  // budget pool
  uint32 cpu_milli_cores = 13;
  uint64 memory_bytes = 14;
  uint64 storage_bytes = 15;

  // physical placement
  string datacenter = 16;
  string availability_zone = 17;
  string cell = 18;
  string rack = 19;
  uint32 unit = 20;

  enum NodeState {
    NODE_UNSPECIFIED = 0;
    READY = 1;
    NOT_READY = 2;
  }
  NodeState state = 50;

  map<string, n0stack.budget.v0.Compute> reserved_computes = 51;
  map<string, n0stack.budget.v0.Storage> reserved_storages = 52;
}


service NodeService {
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {
    option (google.api.http) = {
      get: "/api/v0/node"
    };
  }

  rpc GetNode(GetNodeRequest) returns (Node) {
    option (google.api.http) = {
      get: "/api/v0/node/{name}"
    };
  }

  // it is not necessary for end-user to call these endpoints, so do not export http.
  rpc ApplyNode(ApplyNodeRequest) returns (Node) {
    option (google.api.http) = {
      put: "/api/v0/node/{name}"
      body: "*"
    };
  }

  rpc DeleteNode(DeleteNodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v0/node/{name}"
    };
  }

  rpc ScheduleCompute(ScheduleComputeRequest) returns (Node) {}
  rpc ReserveCompute(ReserveComputeRequest) returns (Node) {}
  // rpc ResizeCompute(ResizeComputeRequest) returns (ReserveComputeResponse) {}
  rpc ReleaseCompute(ReleaseComputeRequest) returns (google.protobuf.Empty) {}

  rpc ScheduleStorage(ScheduleStorageRequest) returns (Node) {}
  rpc ReserveStorage(ReserveStorageRequest) returns (Node) {}
  // rpc ResizeStorae() returns () {}
  rpc ReleaseStorage(ReleaseStorageRequest) returns (google.protobuf.Empty) {}
}


message ListNodesRequest {}
message ListNodesResponse {
  repeated Node nodes = 1;
}

message GetNodeRequest {
  string name = 1;
}

message ApplyNodeRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;

  string address = 10;
  string ipmi_address = 11;

  string serial = 12;

  uint32 cpu_milli_cores = 13;
  uint64 memory_bytes = 14;
  uint64 storage_bytes = 15;

  string datacenter = 16;
  string availability_zone = 17;
  string cell = 18;
  string rack = 19;
  uint32 unit = 20;
}

message DeleteNodeRequest {
  string name = 1;
}

message ScheduleComputeRequest {
  string compute_name = 2;

  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 4;
  uint32 limit_cpu_milli_core = 5;

  uint64 request_memory_bytes = 6;
  uint64 limit_memory_bytes = 7;
}

message ReserveComputeRequest {
  string node_name = 1;
  string compute_name = 2;

  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 4;
  uint32 limit_cpu_milli_core = 5;

  uint64 request_memory_bytes = 6;
  uint64 limit_memory_bytes = 7;
}

message ReleaseComputeRequest {
  string node_name = 1;
  string compute_name = 2;
}

message ScheduleStorageRequest {
  string storage_name = 2;

  map<string, string> annotations = 3;

  uint64 request_bytes = 4;
  uint64 limit_bytes = 5;
}

message ReserveStorageRequest {
  string node_name = 1;
  string storage_name = 2;

  map<string, string> annotations = 3;

  uint64 request_bytes = 4;
  uint64 limit_bytes = 5;
}

message ReleaseStorageRequest {
  string node_name = 1;
  string storage_name = 2;
}
