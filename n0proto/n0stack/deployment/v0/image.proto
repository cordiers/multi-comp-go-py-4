syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/deployment/v0;pdeployment";

package n0stack.deployment.v0;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "n0stack/provisioning/v0/block_storage.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "n0stack";
    contact: {
      name: "n0stack";
      url: "https://github.com/n0stack/n0stack";
    }
  }
  
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};


message Image {
  // Name is a unique field.
  string name = 1;
  // string namespace = 2;

  // Annotations can store metadata used by the system for control.
  // In particular, implementation-dependent fields that can not be set as protobuf fields are targeted.
  // The control specified by n0stack may delete metadata specified by the user.
  map<string, string> annotations = 3;

  // Labels stores user-defined metadata.
  // The n0stack system must not rewrite this value.
  map<string, string> labels = 4;

  message RegisteredBlockStorage {
    string block_storage_name = 1;
    google.protobuf.Timestamp registered_at = 2;
  }
  repeated RegisteredBlockStorage registered_block_storages = 50;
  
  map<string, string> tags = 51;
}


service ImageService {
  rpc ListImages(ListImagesRequest) returns (ListImagesResponse) {
    option (google.api.http) = {
      get: "/api/v0/image"
    };
  }
  rpc GetImage(GetImageRequest) returns (Image) {
    option (google.api.http) = {
      get: "/api/v0/image/{name}"
    };
  }
  rpc ApplyImage(ApplyImageRequest) returns (Image) {
    option (google.api.http) = {
      put: "/api/v0/image/{name}"
      body: "*"
    };
  }
  rpc DeleteImage(DeleteImageRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v0/image/{name}"
    };
  }

  rpc RegisterBlockStorage(RegisterBlockStorageRequest) returns (Image) {
    option (google.api.http) = {
      post: "/api/v0/image/{image_name}/registered_block_storage/{block_storage_name}"
      body: "*"
    };
  }
  rpc UnregisterBlockStorage(UnregisterBlockStorageRequest) returns (Image) {
    option (google.api.http) = {
      delete: "/api/v0/image/{image_name}/registered_block_storage/{block_storage_name}"
    };    
  }
  rpc GenerateBlockStorage(GenerateBlockStorageRequest) returns (n0stack.provisioning.v0.BlockStorage) {}

  rpc TagImage(TagImageRequest) returns (Image) {
    option (google.api.http) = {
      post: "/api/v0/image/{name}/tag/{tag}"
      body: "*"
    };
  }
  rpc UntagImage(UntagImageRequest) returns (Image) {
    option (google.api.http) = {
      delete: "/api/v0/image/{name}/tag/{tag}"
    };
  }
}


message ListImagesRequest {}
message ListImagesResponse {
  repeated Image images = 1;
}

message GetImageRequest {
  string name = 1;
}

message ApplyImageRequest {
  string name = 1;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
}

message DeleteImageRequest {
  string name = 1;
}

message RegisterBlockStorageRequest {
  string image_name = 1;
  string block_storage_name = 2;

  repeated string tags = 3;
}
message UnregisterBlockStorageRequest {
  string image_name = 1;
  string block_storage_name = 2;
}
message GenerateBlockStorageRequest {
  string image_name = 1;
  
  string block_storage_name = 2;
  map<string, string> annotations = 3;

  uint64 request_bytes = 4;
  uint64 limit_bytes = 5;

  string tag = 6;
}

message TagImageRequest {
  string name = 1;
  string tag = 2;

  string registered_block_storage_name = 3;
}
message UntagImageRequest {
  string name = 1;
  string tag = 2;
}
